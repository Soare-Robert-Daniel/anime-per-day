---
interface Props {
  daySlug: string;
  animeList: { title: string }[];
}

const { daySlug, animeList } = Astro.props;
const title = daySlug.toUpperCase();

const torrentQueryBase = "https://nyaa.si/?f=0&c=1_2&q=";
const animeListItems = animeList.map((anime) => {
  return {
    ...anime,
    torrentLink: `${torrentQueryBase}${encodeURIComponent(anime.title)}`,
  };
});
---

<details
  data-day={daySlug}
  open
  class="mb-4 border border-gray-200 rounded-lg shadow-sm"
>
  <summary
    class="px-4 py-3 rounded-lg font-semibold cursor-pointer transition-colors duration-200 bg-gray-100 text-gray-700 hover:bg-gray-200 text-2xl"
  >
    {title}
  </summary>
  <div class="bg-white flex flex-col gap-0">
    {
      animeListItems.map((anime) => (
        <div class="flex items-center gap-0 odd:bg-white even:bg-slate-50 p-2">
          <span class="grow text-2xl text-pretty  text-blue-600 hover:text-blue-800 transition-all duration-200 ease-in-out transform hover:scale-105 hover:underline hover:px-2">
            {anime.title}
          </span>
          <a href={anime.torrentLink} target="_blank">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              width="24"
            >
              <circle cx="12" cy="12" r="11" fill="#3498db" />
              <path
                d="M12 6v8M8 11l4 4 4-4"
                stroke="white"
                stroke-width="2"
                fill="none"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <path
                d="M8 16h8"
                stroke="white"
                stroke-width="2"
                stroke-linecap="round"
              />
            </svg>
          </a>
        </div>
      ))
    }
  </div>
</details>
